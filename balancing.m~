%% Function balancing finds expressions that evaluate to zero for a given numberset 
% Numberset: C x N where C is the number of given observations, N is the
% number of integers
% uncertain_set: 1 x N-1. We pick a number from candidates that satisfy the
% same relation as numberset. 
% candidates: 1 x Nc candidate numbers to use
% optional_numbers: 1 x No optional numbers to be used in expressions
% results 

function [results] = balancing(numberset, uncertain_set, candidates, optional_numbers)

    if (isempty(optional_numbers))
        num_vars = size(numberset, 2);
        optional_numbers = nan; 
    else
        num_vars = size(numberset, 2); 
    end
    
    var_names = 'a':char('a'+num_vars-1); 
    % replace variables with numbers later. 
    trial_rpns = generate_rpn(var_names, '+-*/'); 

    for i = 1:size(trial_rpns, 1)
        trial_results = zeros(size(numberset, 1), 1); 
        current_rpn = trial_rpns{i}; 
        
        % evaluate each ones. 
        for j = 1:length(trial_results)
            if (isempty(optional_numbers))
                % replace alphabets with numbers. 
                rpn_to_eval = populate_rpn( current_rpn, var_names, numberset(j, :) ); 
                trial_results(j) = eval_rpn(rpn_to_eval); 
            else
                for iOpt = length(optional_numbers)
                    rpn_to_eval = populate_rpn( current_rpn, var_names, numberset(j, :) ); 
                    trial_results(j) = eval_rpn(rpn_to_eval); 

                                        
                end
            end
        end
        
        if (all(trial_results == trial_results(1)))
            fprintf('symmetry found with rpn %s, value %d, iter %d out of %d\n',... 
                    current_rpn, trial_results(1), i, size(trial_rpns, 1)); 
            fprintf('trying candidates\n'); 
            for iCan = length(candidates)
                rpn_to_eval = populate_rpn(current_rpn, var_names, [uncertain_set(:)', candidates(iCan)]); 
                candidate_result = eval_rpn(rpn_to_eval); 
                if (candidate_result == trial_results(1))
                    fprintf('candidate %d is verified\n', candidates(iCan) ); 
                end
            end % foreach candid
            
        end % if symmetry found.        
        
    end % foreach trial_rpn    
end

function rpn_cell = populate_rpn(base, var_names, numberset)

    num_vars = size(numberset, 2); 
    rpn_cell = cell(length(base), 1); 
    
    for i = 1:length(base)
        var_idx = strfind(var_names, base(i));
        if (~isempty(var_idx))
            rpn_cell{i} = numberset(var_idx); 
        else
            rpn_cell{i} = base(i); 
        end
    end
%     for ivars = 1:num_vars
%         
% %         rpn_str = strrep(rpn_str, var_names(ivars), num2str(numberset(ivars))); 
%     end

end